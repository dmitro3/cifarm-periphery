type NftDataResponse {
  tokenId: Int!
  tokenURI: String
  ownerAddress: String
}

type GetNftsByOwnerAddressResponse {
  records: [NftDataResponse!]!
  count: Int!
}

type GetNftsByTokenIdsResponse {
  records: [NftDataResponse!]!
}

type Query {
  nftsByOwnerAddress(args: GetNftsByOwnerAddressArgs!): GetNftsByOwnerAddressResponse!
  nftsByTokenIds(args: GetNftsByTokenIdsArgs!): GetNftsByTokenIdsResponse!
  nftByTokenId(args: GetNftByTokenIdArgs!): NftDataResponse!
}

input GetNftsByOwnerAddressArgs {
  input: GetNftsByOwnerAddressInput
  filter: GetNftsByOwnerAddressFilter
}

input GetNftsByOwnerAddressInput {
  accountAddress: ID!
  network: String
  nftKey: String
  chainKey: String
}

input GetNftsByOwnerAddressFilter {
  skip: Int
  take: Int
}

input GetNftsByTokenIdsArgs {
  input: GetNftsByTokenIdsInput
}

input GetNftsByTokenIdsInput {
  tokenIds: [Int!]!
  network: String
  nftKey: String
  chainKey: String
}

input GetNftByTokenIdArgs {
  input: GetNftByTokenIdInput
}

input GetNftByTokenIdInput {
  tokenId: Int!
  network: String
  nftKey: String
  chainKey: String
}