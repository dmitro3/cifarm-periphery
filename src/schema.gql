type NftData {
  tokenId: Int!
  tokenURI: String
  ownerAddress: String
}

type GetNftsByOwnerAddressResponse {
  records: [NftData!]!
  count: Int!
}

type GetNftsByTokenIdsResponse {
  records: [NftData!]!
}

type Query {
  nftsByOwnerAddress(args: GetNftsByOwnerAddressArgs!): GetNftsByOwnerAddressResponse!
  nftsByTokenIds(args: GetNftsByTokenIdsArgs!): GetNftsByTokenIdsResponse!
}

input GetNftsByOwnerAddressArgs {
  input: GetNftsByOwnerAddressInput
  filter: GetNftsByOwnerAddressFilter
}

input GetNftsByOwnerAddressInput {
  accountAddress: ID!
  network: String
  nftKey: String
  chainKey: String
}

input GetNftsByOwnerAddressFilter {
  skip: Int
  take: Int
}

input GetNftsByTokenIdsArgs {
  input: GetNftByTokenIdsInput
}

input GetNftByTokenIdsInput {
  tokenIds: [Int!]!
  network: String
  nftKey: String
  chainKey: String
}